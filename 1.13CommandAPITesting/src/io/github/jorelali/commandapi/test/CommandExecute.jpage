package io.github.jorelali.cmdapitest;

import com.google.common.collect.Lists;
import com.mojang.brigadier.Command;
import com.mojang.brigadier.CommandDispatcher;
import com.mojang.brigadier.RedirectModifier;
import com.mojang.brigadier.ResultConsumer;
import com.mojang.brigadier.SingleRedirectModifier;
import com.mojang.brigadier.arguments.DoubleArgumentType;
import com.mojang.brigadier.builder.ArgumentBuilder;
import com.mojang.brigadier.builder.LiteralArgumentBuilder;
import com.mojang.brigadier.builder.RequiredArgumentBuilder;
import com.mojang.brigadier.context.CommandContext;
import com.mojang.brigadier.exceptions.CommandSyntaxException;
import com.mojang.brigadier.exceptions.Dynamic2CommandExceptionType;
import com.mojang.brigadier.exceptions.DynamicCommandExceptionType;
import com.mojang.brigadier.exceptions.SimpleCommandExceptionType;
import com.mojang.brigadier.exceptions.Dynamic2CommandExceptionType.Function;
import com.mojang.brigadier.tree.CommandNode;
import com.mojang.brigadier.tree.LiteralCommandNode;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.Iterator;
import java.util.OptionalInt;
import java.util.function.BiPredicate;
import java.util.function.BinaryOperator;
import java.util.function.IntFunction;
import java.util.function.Predicate;
import net.minecraft.server.v1_13_R1.ArgumentAnchor;
import net.minecraft.server.v1_13_R1.ArgumentBlockPredicate;
import net.minecraft.server.v1_13_R1.ArgumentCriterionValue;
import net.minecraft.server.v1_13_R1.ArgumentEntity;
import net.minecraft.server.v1_13_R1.ArgumentMinecraftKeyRegistered;
import net.minecraft.server.v1_13_R1.ArgumentNBTKey;
import net.minecraft.server.v1_13_R1.ArgumentPosition;
import net.minecraft.server.v1_13_R1.ArgumentRotation;
import net.minecraft.server.v1_13_R1.ArgumentRotationAxis;
import net.minecraft.server.v1_13_R1.ArgumentScoreboardObjective;
import net.minecraft.server.v1_13_R1.ArgumentScoreholder;
import net.minecraft.server.v1_13_R1.ArgumentVec3;
import net.minecraft.server.v1_13_R1.BlockPosition;
import net.minecraft.server.v1_13_R1.Blocks;
import net.minecraft.server.v1_13_R1.BossBattleCustom;
import net.minecraft.server.v1_13_R1.ChatMessage;
import net.minecraft.server.v1_13_R1.CommandData;
import net.minecraft.server.v1_13_R1.CommandDataAccessor;
import net.minecraft.server.v1_13_R1.CommandListenerWrapper;
import net.minecraft.server.v1_13_R1.CommmandBossBar;
import net.minecraft.server.v1_13_R1.DimensionManager;
import net.minecraft.server.v1_13_R1.Entity;
import net.minecraft.server.v1_13_R1.IBlockData;
import net.minecraft.server.v1_13_R1.NBTBase;
import net.minecraft.server.v1_13_R1.NBTTagByte;
import net.minecraft.server.v1_13_R1.NBTTagCompound;
import net.minecraft.server.v1_13_R1.NBTTagDouble;
import net.minecraft.server.v1_13_R1.NBTTagFloat;
import net.minecraft.server.v1_13_R1.NBTTagInt;
import net.minecraft.server.v1_13_R1.NBTTagLong;
import net.minecraft.server.v1_13_R1.NBTTagShort;
import net.minecraft.server.v1_13_R1.ScoreboardObjective;
import net.minecraft.server.v1_13_R1.ScoreboardScore;
import net.minecraft.server.v1_13_R1.ScoreboardServer;
import net.minecraft.server.v1_13_R1.ShapeDetectorBlock;
import net.minecraft.server.v1_13_R1.StructureBoundingBox;
import net.minecraft.server.v1_13_R1.TileEntity;
import net.minecraft.server.v1_13_R1.WorldServer;
import net.minecraft.server.v1_13_R1.ArgumentAnchor.Anchor;
import net.minecraft.server.v1_13_R1.ArgumentCriterionValue.b;
import net.minecraft.server.v1_13_R1.ArgumentNBTKey.c;
import net.minecraft.server.v1_13_R1.CommandData.a;
import net.minecraft.server.v1_13_R1.CriterionConditionValue.d;

public class CommandExecute {
 private static final Dynamic2CommandExceptionType a = new Dynamic2CommandExceptionType((arg, arg0) -> {
  return new ChatMessage("commands.execute.blocks.toobig", new Object[] {
   arg,
   arg0
  });
 });
 private static final SimpleCommandExceptionType b = new SimpleCommandExceptionType(
  new ChatMessage("commands.execute.conditional.fail", new Object[0]));
 private static final DynamicCommandExceptionType c = new DynamicCommandExceptionType((arg) -> {
	  return new ChatMessage("commands.execute.conditional.fail_count", new Object[] { arg });
 });
 private static final BinaryOperator < ResultConsumer < CommandListenerWrapper >> d = (arg, arg0) -> {
  return (arg1, arg2, arg3) -> {
   arg.onCommandComplete(arg1, arg2, arg3);
   arg0.onCommandComplete(arg1, arg2, arg3);
  };
 };

 @SuppressWarnings("unchecked")
 public static void a(CommandDispatcher < CommandListenerWrapper > arg) {
  LiteralCommandNode arg0 = arg.register((LiteralArgumentBuilder) net.minecraft.server.v1_13_R1.CommandDispatcher
   .a("execute").requires((arg) -> {
    return arg.hasPermission(2);
   }));
  arg.register(
   (LiteralArgumentBuilder)((LiteralArgumentBuilder)((LiteralArgumentBuilder)((LiteralArgumentBuilder)((LiteralArgumentBuilder)((LiteralArgumentBuilder)((LiteralArgumentBuilder)((LiteralArgumentBuilder)((LiteralArgumentBuilder)((LiteralArgumentBuilder)((LiteralArgumentBuilder)((LiteralArgumentBuilder)((LiteralArgumentBuilder) net.minecraft.server.v1_13_R1.CommandDispatcher
       .a("execute").requires((arg) -> {
        return arg.hasPermission(2);
       })).then(net.minecraft.server.v1_13_R1.CommandDispatcher.a("run").redirect(arg.getRoot())))
      .then(a((CommandNode) arg0,
       net.minecraft.server.v1_13_R1.CommandDispatcher.a("if"), true)))
     .then(a((CommandNode) arg0,
      net.minecraft.server.v1_13_R1.CommandDispatcher.a("unless"),
      false))).then(
     net.minecraft.server.v1_13_R1.CommandDispatcher.a("as")
     .then(net.minecraft.server.v1_13_R1.CommandDispatcher
      .a("targets", ArgumentEntity.b())
      .fork(arg0, (arg) -> {
       ArrayList arg0 = Lists
       .newArrayList();
       Iterator arg1 = ArgumentEntity
       .c(arg, "targets")
       .iterator();

       while (arg1.hasNext()) {
        Entity arg2 = (Entity) arg1
         .next();
        arg0.add(
         ((CommandListenerWrapper) arg
          .getSource()).a(
          arg2));
       }

       return arg0;
      })))).then(
     net.minecraft.server.v1_13_R1.CommandDispatcher
     .a("at")
     .then(net.minecraft.server.v1_13_R1.CommandDispatcher
      .a("targets",
       ArgumentEntity
       .b())
      .fork(arg0, (
       arg) -> {
       ArrayList arg0 = Lists
       .newArrayList();
       Iterator arg1 = ArgumentEntity
       .c(arg, "targets")
       .iterator();

       while (arg1
        .hasNext()) {
        Entity arg2 = (Entity) arg1
         .next();
        arg0.add(
         ((CommandListenerWrapper) arg
          .getSource())
         .a((WorldServer) arg2.world)
         .a(arg2.bI())
         .a(arg2.aO()));
       }

       return arg0;
      })))).then(
     ((LiteralArgumentBuilder) net.minecraft.server.v1_13_R1.CommandDispatcher
      .a("store")
      .then(a(arg0,
       net.minecraft.server.v1_13_R1.CommandDispatcher
       .a("result"),
       true))).then(
      a(arg0, net.minecraft.server.v1_13_R1.CommandDispatcher
       .a("success"),
       false))))
    .then(((LiteralArgumentBuilder) net.minecraft.server.v1_13_R1.CommandDispatcher
     .a("positioned")
     .then(net.minecraft.server.v1_13_R1.CommandDispatcher
      .a("pos",
       ArgumentVec3
       .a())
      .redirect(
       arg0,
       (arg) -> {
        return ((CommandListenerWrapper) arg
          .getSource())
         .a(ArgumentVec3
          .a(arg, "pos"));
       }))).then(
     net.minecraft.server.v1_13_R1.CommandDispatcher
     .a("as")
     .then(net.minecraft.server.v1_13_R1.CommandDispatcher
      .a("targets",
       ArgumentEntity
       .b())
      .fork(arg0,
       (arg) -> {
        ArrayList arg0 = Lists
        .newArrayList();
        Iterator arg1 = ArgumentEntity
        .c(arg, "targets")
        .iterator();

        while (arg1
         .hasNext()) {
         Entity arg2 = (Entity) arg1
          .next();
         arg0.add(
          ((CommandListenerWrapper) arg
           .getSource())
          .a(arg2.bI()));
        }

        return arg0;
       }))))).then(
    ((LiteralArgumentBuilder) net.minecraft.server.v1_13_R1.CommandDispatcher
     .a("rotated")
     .then(net.minecraft.server.v1_13_R1.CommandDispatcher
      .a("rot",
       ArgumentRotation
       .a())
      .redirect(
       arg0,
       (arg) -> {
        return ((CommandListenerWrapper) arg
          .getSource())
         .a(ArgumentRotation
          .a(arg, "rot")
          .b((CommandListenerWrapper) arg
           .getSource()));
       }))).then(
     net.minecraft.server.v1_13_R1.CommandDispatcher
     .a("as")
     .then(net.minecraft.server.v1_13_R1.CommandDispatcher
      .a("targets",
       ArgumentEntity
       .b())
      .fork(arg0,
       (arg) -> {
        ArrayList arg0 = Lists
        .newArrayList();
        Iterator arg1 = ArgumentEntity
        .c(arg, "targets")
        .iterator();

        while (arg1
         .hasNext()) {
         Entity arg2 = (Entity) arg1
          .next();
         arg0.add(
          ((CommandListenerWrapper) arg
           .getSource())
          .a(arg2.aO()));
        }

        return arg0;
       }))))).then(
    ((LiteralArgumentBuilder) net.minecraft.server.v1_13_R1.CommandDispatcher
     .a("facing")
     .then(net.minecraft.server.v1_13_R1.CommandDispatcher
      .a("entity")
      .then(net.minecraft.server.v1_13_R1.CommandDispatcher
       .a("targets",
        ArgumentEntity
        .b())
       .then(net.minecraft.server.v1_13_R1.CommandDispatcher
        .a("anchor",
         ArgumentAnchor
         .a())
        .fork(arg0,
         (arg) -> {
          ArrayList arg0 = Lists
          .newArrayList();
          Anchor arg1 = ArgumentAnchor
          .a(arg, "anchor");
          Iterator arg2 = ArgumentEntity
          .c(arg, "targets")
          .iterator();

          while (arg2
           .hasNext()) {
           Entity arg3 = (Entity) arg2
            .next();
           arg0.add(
            ((CommandListenerWrapper) arg
             .getSource())
            .a(arg3, arg1));
          }

          return arg0;
         }))))).then(
     net.minecraft.server.v1_13_R1.CommandDispatcher
     .a("pos",
      ArgumentVec3
      .a())
     .redirect(
      arg0,
      (arg) -> {
       return ((CommandListenerWrapper) arg
         .getSource())
        .b(ArgumentVec3
         .a(arg, "pos"));
      })))).then(
    net.minecraft.server.v1_13_R1.CommandDispatcher
    .a("align")
    .then(net.minecraft.server.v1_13_R1.CommandDispatcher
     .a("axes",
      ArgumentRotationAxis
      .a())
     .redirect(
      arg0,
      (arg) -> {
       return ((CommandListenerWrapper) arg
         .getSource())
        .a(((CommandListenerWrapper) arg
          .getSource())
         .getPosition()
         .a(ArgumentRotationAxis
          .a(arg, "axes")));
      })))).then(
    net.minecraft.server.v1_13_R1.CommandDispatcher
    .a("anchored")
    .then(net.minecraft.server.v1_13_R1.CommandDispatcher
     .a("anchor",
      ArgumentAnchor
      .a())
     .redirect(
      arg0,
      (arg) -> {
       return ((CommandListenerWrapper) arg
         .getSource())
        .a(ArgumentAnchor
         .a(arg, "anchor"));
      })))).then(
    ((LiteralArgumentBuilder)((LiteralArgumentBuilder) net.minecraft.server.v1_13_R1.CommandDispatcher
     .a("in")
     .then(net.minecraft.server.v1_13_R1.CommandDispatcher
      .a("overworld")
      .redirect(
       arg0,
       (arg) -> {
        return ((CommandListenerWrapper) arg
          .getSource())
         .a(((CommandListenerWrapper) arg
           .getSource())
          .getServer()
          .a(DimensionManager.OVERWORLD));
       }))).then(
     net.minecraft.server.v1_13_R1.CommandDispatcher
     .a("the_nether")
     .redirect(
      arg0,
      (arg) -> {
       return ((CommandListenerWrapper) arg
         .getSource())
        .a(((CommandListenerWrapper) arg
          .getSource())
         .getServer()
         .a(DimensionManager.NETHER));
      }))).then(
     net.minecraft.server.v1_13_R1.CommandDispatcher
     .a("the_end")
     .redirect(
      arg0,
      (arg) -> {
       return ((CommandListenerWrapper) arg
         .getSource())
        .a(((CommandListenerWrapper) arg
          .getSource())
         .getServer()
         .a(DimensionManager.THE_END));
      }))));
 }

 @SuppressWarnings("unchecked")
 private static ArgumentBuilder < CommandListenerWrapper, ? > a(LiteralCommandNode < CommandListenerWrapper > arg,
  LiteralArgumentBuilder < CommandListenerWrapper > arg0, boolean arg1) {
  arg0.then(net.minecraft.server.v1_13_R1.CommandDispatcher.a("score")
   .then(net.minecraft.server.v1_13_R1.CommandDispatcher.a("targets", ArgumentScoreholder.b())
    .suggests(ArgumentScoreholder.a).then(net.minecraft.server.v1_13_R1.CommandDispatcher
     .a("objective", ArgumentScoreboardObjective.a()).redirect(arg, (arg0) -> {
      return a((CommandListenerWrapper) arg0.getSource(),
       ArgumentScoreholder.c(arg0, "targets"),
       ArgumentScoreboardObjective.a(arg0, "objective"), arg1);
     }))));
  arg0.then(net.minecraft.server.v1_13_R1.CommandDispatcher.a("bossbar")
   .then(((RequiredArgumentBuilder) net.minecraft.server.v1_13_R1.CommandDispatcher
    .a("id", ArgumentMinecraftKeyRegistered.a()).suggests(CommmandBossBar.a)
    .then(net.minecraft.server.v1_13_R1.CommandDispatcher.a("value").redirect(arg, (arg0) -> {
     return a((CommandListenerWrapper) arg0.getSource(), CommmandBossBar.a(arg0), true, arg1);
    }))).then(net.minecraft.server.v1_13_R1.CommandDispatcher.a("max").redirect(arg, (arg0) -> {
    return a((CommandListenerWrapper) arg0.getSource(), CommmandBossBar.a(arg0), false, arg1);
   }))));
  Iterator arg2 = CommandData.a.iterator();

  while (arg2.hasNext()) {
   a arg3 = (a) arg2.next();
   arg3.a(arg0, (arg2) -> {
    return arg2
     .then(((RequiredArgumentBuilder)((RequiredArgumentBuilder)((RequiredArgumentBuilder)((RequiredArgumentBuilder)((RequiredArgumentBuilder) net.minecraft.server.v1_13_R1.CommandDispatcher
      .a("path", ArgumentNBTKey.a())
      .then(net.minecraft.server.v1_13_R1.CommandDispatcher.a("int")
       .then(net.minecraft.server.v1_13_R1.CommandDispatcher
        .a("scale", DoubleArgumentType.doubleArg()).redirect(arg, (arg1x) -> {
         return a((CommandListenerWrapper) arg1x.getSource(), arg3.a(arg1x),
          ArgumentNBTKey.a(arg1x, "path"), (arg0) -> {
           return new NBTTagInt(
            (int)((double) arg0 * DoubleArgumentType
             .getDouble(arg1x, "scale")));
          }, arg1);
        })))).then(net.minecraft.server.v1_13_R1.CommandDispatcher.a("float")
      .then(net.minecraft.server.v1_13_R1.CommandDispatcher
       .a("scale", DoubleArgumentType.doubleArg())
       .redirect(arg, (arg1x) -> {
        return a((CommandListenerWrapper) arg1x.getSource(),
         arg3.a(arg1x),
         ArgumentNBTKey.a(arg1x, "path"), (arg0) -> {
          return new NBTTagFloat(
           (float)((double) arg0 *
            DoubleArgumentType
            .getDouble(
             arg1x,
             "scale")));
         }, arg1);
       })))).then(
      net.minecraft.server.v1_13_R1.CommandDispatcher
      .a("short")
      .then(net.minecraft.server.v1_13_R1.CommandDispatcher
       .a("scale",
        DoubleArgumentType
        .doubleArg())
       .redirect(arg, (arg1x) -> {
        return a(
         (CommandListenerWrapper) arg1x
         .getSource(),
         arg3.a(arg1x),
         ArgumentNBTKey.a(
          arg1x, "path"),
         (arg0) -> {
          return new NBTTagShort(
           (short)((int)((double) arg0 *
            DoubleArgumentType
            .getDouble(
             arg1x,
             "scale"))));
         }, arg1);
       })))).then(
      net.minecraft.server.v1_13_R1.CommandDispatcher
      .a("long")
      .then(net.minecraft.server.v1_13_R1.CommandDispatcher
       .a("scale",
        DoubleArgumentType
        .doubleArg())
       .redirect(
        arg,
        (arg1x) -> {
         return a(
          (CommandListenerWrapper) arg1x
          .getSource(),
          arg3.a(arg1x),
          ArgumentNBTKey
          .a(arg1x,
           "path"),
          (arg0) -> {
           return new NBTTagLong(
            (long)((double) arg0 *
             DoubleArgumentType
             .getDouble(
              arg1x,
              "scale")));
          },
          arg1);
        })))).then(
      net.minecraft.server.v1_13_R1.CommandDispatcher
      .a("double")
      .then(net.minecraft.server.v1_13_R1.CommandDispatcher
       .a("scale",
        DoubleArgumentType
        .doubleArg())
       .redirect(
        arg,
        (arg1x) -> {
         return a(
          (CommandListenerWrapper) arg1x
          .getSource(),
          arg3.a(arg1x),
          ArgumentNBTKey
          .a(arg1x,
           "path"),
          (arg0) -> {
           return new NBTTagDouble(
            (double) arg0 *
            DoubleArgumentType
            .getDouble(
             arg1x,
             "scale"));
          },
          arg1);
        })))).then(
      net.minecraft.server.v1_13_R1.CommandDispatcher
      .a("byte")
      .then(net.minecraft.server.v1_13_R1.CommandDispatcher
       .a("scale",
        DoubleArgumentType
        .doubleArg())
       .redirect(
        arg,
        (arg1x) -> {
         return a(
          (CommandListenerWrapper) arg1x
          .getSource(),
          arg3.a(arg1x),
          ArgumentNBTKey
          .a(arg1x,
           "path"),
          (arg0) -> {
           return new NBTTagByte(
            (byte)((int)((double) arg0 *
             DoubleArgumentType
             .getDouble(
              arg1x,
              "scale"))));
          },
          arg1);
        }))));
   });
  }

  return arg0;
 }

 private static CommandListenerWrapper a(CommandListenerWrapper arg, Collection < String > arg0,
  ScoreboardObjective arg1, boolean arg2) {
  ScoreboardServer arg3 = arg.getServer().getScoreboard();
  return arg.a((arg3x, arg4, arg5) -> {
   Iterator arg6 = arg0.iterator();

   while (arg6.hasNext()) {
    String arg7 = (String) arg6.next();
    ScoreboardScore arg8 = arg3.getPlayerScoreForObjective(arg7, arg1);
    int arg9 = arg2 ? arg5 : (arg4 ? 1 : 0);
    arg8.setScore(arg9);
   }

  }, d);
 }

 private static CommandListenerWrapper a(CommandListenerWrapper arg, BossBattleCustom arg0, boolean arg1,
  boolean arg2) {
  return arg.a((arg2x, arg3, arg4) -> {
   int arg5 = arg2 ? arg4 : (arg3 ? 1 : 0);
   if (arg1) {
    arg0.a(arg5);
   } else {
    arg0.b(arg5);
   }

  }, d);
 }

 private static CommandListenerWrapper a(CommandListenerWrapper arg, CommandDataAccessor arg0, c arg1,
  IntFunction < NBTBase > arg2, boolean arg3) {
  return arg.a((arg3x, arg4, arg5) -> {
   try {
    NBTTagCompound arg6 = arg0.a();
    int arg7 = arg3 ? arg5 : (arg4 ? 1 : 0);
    arg1.a(arg6, (NBTBase) arg2.apply(arg7));
    arg0.a(arg6);
   } catch (CommandSyntaxException arg8) {;
   }

  }, d);
 }

 private static ArgumentBuilder < CommandListenerWrapper, ? > a(CommandNode < CommandListenerWrapper > arg,
  LiteralArgumentBuilder < CommandListenerWrapper > arg0, boolean arg1) {
  return ((LiteralArgumentBuilder)((LiteralArgumentBuilder)((LiteralArgumentBuilder) arg0
     .then(net.minecraft.server.v1_13_R1.CommandDispatcher.a("block")
      .then(net.minecraft.server.v1_13_R1.CommandDispatcher.a("pos", ArgumentPosition.a())
       .then(a((CommandNode) arg,
        (ArgumentBuilder) net.minecraft.server.v1_13_R1.CommandDispatcher.a("block",
         ArgumentBlockPredicate.a()),
        arg1, (net.minecraft.server.v1_13_R1.CommandExecute.a)((arg) -> {
         return ArgumentBlockPredicate.a(arg, "block")
          .test(new ShapeDetectorBlock(
           ((CommandListenerWrapper) arg.getSource()).getWorld(),
           ArgumentPosition.a(arg, "pos"), true));
        })))))).then(net.minecraft.server.v1_13_R1.CommandDispatcher.a("score")
     .then(net.minecraft.server.v1_13_R1.CommandDispatcher
      .a("target", ArgumentScoreholder.a())
      .suggests(ArgumentScoreholder.a)
      .then(((RequiredArgumentBuilder)((RequiredArgumentBuilder)((RequiredArgumentBuilder)((RequiredArgumentBuilder)((RequiredArgumentBuilder) net.minecraft.server.v1_13_R1.CommandDispatcher
       .a("targetObjective",
        ArgumentScoreboardObjective.a())
       .then(net.minecraft.server.v1_13_R1.CommandDispatcher
        .a("=")
        .then(net.minecraft.server.v1_13_R1.CommandDispatcher
         .a("source", ArgumentScoreholder.a())
         .suggests(ArgumentScoreholder.a)
         .then(a((CommandNode) arg,
          (ArgumentBuilder) net.minecraft.server.v1_13_R1.CommandDispatcher
          .a("sourceObjective",
           ArgumentScoreboardObjective
           .a()),
          arg1,
          (net.minecraft.server.v1_13_R1.CommandExecute.a)((
           arg) -> {
           return a(arg,
            Integer::equals);
          })))))).then(
       net.minecraft.server.v1_13_R1.CommandDispatcher
       .a("<")
       .then(net.minecraft.server.v1_13_R1.CommandDispatcher
        .a("source",
         ArgumentScoreholder
         .a())
        .suggests(
         ArgumentScoreholder.a)
        .then(a((CommandNode) arg,
         (ArgumentBuilder) net.minecraft.server.v1_13_R1.CommandDispatcher
         .a("sourceObjective",
          ArgumentScoreboardObjective
          .a()),
         arg1,
         (net.minecraft.server.v1_13_R1.CommandExecute.a)((
          arg) -> {
          return a(
           arg,
           (arg, arg0) -> {
            return arg
             .intValue() < arg0
             .intValue();
           });
         })))))).then(
       net.minecraft.server.v1_13_R1.CommandDispatcher
       .a("<=")
       .then(net.minecraft.server.v1_13_R1.CommandDispatcher
        .a("source",
         ArgumentScoreholder
         .a())
        .suggests(
         ArgumentScoreholder.a)
        .then(a((CommandNode) arg,
         (ArgumentBuilder) net.minecraft.server.v1_13_R1.CommandDispatcher
         .a("sourceObjective",
          ArgumentScoreboardObjective
          .a()),
         arg1,
         (net.minecraft.server.v1_13_R1.CommandExecute.a)((
          arg) -> {
          return a(
           arg,
           (arg, arg0) -> {
            return arg
             .intValue() <= arg0
             .intValue();
           });
         })))))).then(
       net.minecraft.server.v1_13_R1.CommandDispatcher
       .a(">")
       .then(net.minecraft.server.v1_13_R1.CommandDispatcher
        .a("source",
         ArgumentScoreholder
         .a())
        .suggests(
         ArgumentScoreholder.a)
        .then(a((CommandNode) arg,
         (ArgumentBuilder) net.minecraft.server.v1_13_R1.CommandDispatcher
         .a("sourceObjective",
          ArgumentScoreboardObjective
          .a()),
         arg1,
         (net.minecraft.server.v1_13_R1.CommandExecute.a)((
          arg) -> {
          return a(
           arg,
           (arg, arg0) -> {
            return arg
             .intValue() > arg0
             .intValue();
           });
         })))))).then(
       net.minecraft.server.v1_13_R1.CommandDispatcher
       .a(">=")
       .then(net.minecraft.server.v1_13_R1.CommandDispatcher
        .a("source",
         ArgumentScoreholder
         .a())
        .suggests(
         ArgumentScoreholder.a)
        .then(a((CommandNode) arg,
         (ArgumentBuilder) net.minecraft.server.v1_13_R1.CommandDispatcher
         .a("sourceObjective",
          ArgumentScoreboardObjective
          .a()),
         arg1,
         (net.minecraft.server.v1_13_R1.CommandExecute.a)((
          arg) -> {
          return a(
           arg,
           (arg, arg0) -> {
            return arg
             .intValue() >= arg0
             .intValue();
           });
         })))))).then(
       net.minecraft.server.v1_13_R1.CommandDispatcher
       .a("matches")
       .then(a((CommandNode) arg,
        (ArgumentBuilder) net.minecraft.server.v1_13_R1.CommandDispatcher
        .a("range",
         ArgumentCriterionValue
         .a()),
        arg1,
        (net.minecraft.server.v1_13_R1.CommandExecute.a)((
         arg) -> {
         return a(
          arg,
          b.a(arg, "range"));
        }))))))))
    .then(net.minecraft.server.v1_13_R1.CommandDispatcher
     .a("blocks")
     .then(net.minecraft.server.v1_13_R1.CommandDispatcher
      .a("start",
       ArgumentPosition
       .a())
      .then(net.minecraft.server.v1_13_R1.CommandDispatcher
       .a("end",
        ArgumentPosition
        .a())
       .then(((RequiredArgumentBuilder) net.minecraft.server.v1_13_R1.CommandDispatcher
        .a("destination",
         ArgumentPosition
         .a())
        .then(a((CommandNode) arg,
         (ArgumentBuilder) net.minecraft.server.v1_13_R1.CommandDispatcher
         .a("all"),
         arg1,
         false))).then(
        a((CommandNode) arg,
         (ArgumentBuilder) net.minecraft.server.v1_13_R1.CommandDispatcher
         .a("masked"),
         arg1,
         true)))))))
		  
		  
		  
   .then(net.minecraft.server.v1_13_R1.CommandDispatcher
    .a("entity")
    .then(((RequiredArgumentBuilder) net.minecraft.server.v1_13_R1.CommandDispatcher
     .a("entities",
      ArgumentEntity
      .b())
     .fork(arg, (arg0) -> { return a(arg0, arg1, !ArgumentEntity.c(arg0, "entities").isEmpty()); })
     ).executes(arg1 ? (arg) -> {
		  int arg0 = ArgumentEntity.c(arg, "entities").size();
		  if (arg0 > 0) {
			  //TODO
		   ((CommandListenerWrapper) arg.getSource()).sendMessage(new ChatMessage("commands.execute.conditional.pass_count", new Object[] { Integer.valueOf(arg0) }), false);
		   return arg0;
		  } else {
		   throw b.create();
		  }
     } :
     (arg) -> {
      int arg0 = ArgumentEntity
      .c(arg, "entities")
      .size();
      if (arg0 == 0) {
       ((CommandListenerWrapper) arg
        .getSource())
       .sendMessage(
        new ChatMessage(
         "commands.execute.conditional.pass",
         new Object[0]),
        false);
       return 1;
      } else {
       throw c.create(
        Integer.valueOf(
         arg0));
      }
     })));
 }

 private static boolean a(CommandContext < CommandListenerWrapper > arg, BiPredicate < Integer, Integer > arg0)
 throws CommandSyntaxException {
  String arg1 = ArgumentScoreholder.a(arg, "target");
  ScoreboardObjective arg2 = ArgumentScoreboardObjective.a(arg, "targetObjective");
  String arg3 = ArgumentScoreholder.a(arg, "source");
  ScoreboardObjective arg4 = ArgumentScoreboardObjective.a(arg, "sourceObjective");
  ScoreboardServer arg5 = ((CommandListenerWrapper) arg.getSource()).getServer().getScoreboard();
  if (arg5.b(arg1, arg2) && arg5.b(arg3, arg4)) {
   ScoreboardScore arg6 = arg5.getPlayerScoreForObjective(arg1, arg2);
   ScoreboardScore arg7 = arg5.getPlayerScoreForObjective(arg3, arg4);
   return arg0.test(Integer.valueOf(arg6.getScore()), Integer.valueOf(arg7.getScore()));
  } else {
   return false;
  }
 }

 private static boolean a(CommandContext < CommandListenerWrapper > arg, d arg0) throws CommandSyntaxException {
  String arg1 = ArgumentScoreholder.a(arg, "target");
  ScoreboardObjective arg2 = ArgumentScoreboardObjective.a(arg, "targetObjective");
  ScoreboardServer arg3 = ((CommandListenerWrapper) arg.getSource()).getServer().getScoreboard();
  return !arg3.b(arg1, arg2) ? false : arg0.d(arg3.getPlayerScoreForObjective(arg1, arg2).getScore());
 }

 private static Collection < CommandListenerWrapper > a(CommandContext < CommandListenerWrapper > arg, boolean arg0,
  boolean arg1) {
  return (Collection)(arg1 == arg0 ? Collections.singleton(arg.getSource()) : Collections.emptyList());
 }

 private static ArgumentBuilder < CommandListenerWrapper, ? > a(CommandNode < CommandListenerWrapper > arg,
  ArgumentBuilder < CommandListenerWrapper, ? > arg0, boolean arg1,
  net.minecraft.server.v1_13_R1.CommandExecute.a arg2) {
  return arg0.fork(arg, (arg1x) -> {
   return a(arg1x, arg1, arg2.test(arg1x));
  }).executes((arg1x) -> {
   if (arg1 == arg2.test(arg1x)) {
    ((CommandListenerWrapper) arg1x.getSource())
    .sendMessage(new ChatMessage("commands.execute.conditional.pass", new Object[0]), false);
    return 1;
   } else {
    throw b.create();
   }
  });
 }

 private static ArgumentBuilder < CommandListenerWrapper, ? > a(CommandNode < CommandListenerWrapper > arg,
  ArgumentBuilder < CommandListenerWrapper, ? > arg0, boolean arg1, boolean arg2) {
  return arg0.fork(arg, (arg1x) -> {
   return a(arg1x, arg1, c(arg1x, arg2).isPresent());
  }).executes(arg1 ? (arg0) -> {
   return a(arg0, arg2);
  } : (arg0) -> {
   return b(arg0, arg2);
  });
 }

 private static int a(CommandContext < CommandListenerWrapper > arg, boolean arg0) throws CommandSyntaxException {
  OptionalInt arg1 = c(arg, arg0);
  if (arg1.isPresent()) {
   ((CommandListenerWrapper) arg.getSource())
   .sendMessage(new ChatMessage("commands.execute.conditional.pass_count",
    new Object[] {
     Integer.valueOf(arg1.getAsInt())
    }), false);
   return arg1.getAsInt();
  } else {
   throw b.create();
  }
 }

 private static int b(CommandContext < CommandListenerWrapper > arg, boolean arg0) throws CommandSyntaxException {
  OptionalInt arg1 = c(arg, arg0);
  if (!arg1.isPresent()) {
   ((CommandListenerWrapper) arg.getSource())
   .sendMessage(new ChatMessage("commands.execute.conditional.pass", new Object[0]), false);
   return 1;
  } else {
   throw c.create(Integer.valueOf(arg1.getAsInt()));
  }
 }

 private static OptionalInt c(CommandContext < CommandListenerWrapper > arg, boolean arg0)
 throws CommandSyntaxException {
  return a(((CommandListenerWrapper) arg.getSource()).getWorld(), ArgumentPosition.a(arg, "start"),
   ArgumentPosition.a(arg, "end"), ArgumentPosition.a(arg, "destination"), arg0);
 }

 private static OptionalInt a(WorldServer arg, BlockPosition arg0, BlockPosition arg1, BlockPosition arg2,
  boolean arg3) throws CommandSyntaxException {
  StructureBoundingBox arg4 = new StructureBoundingBox(arg0, arg1);
  StructureBoundingBox arg5 = new StructureBoundingBox(arg2, arg2.a(arg4.b()));
  BlockPosition arg6 = new BlockPosition(arg5.a - arg4.a, arg5.b - arg4.b, arg5.c - arg4.c);
  int arg7 = arg4.c() * arg4.d() * arg4.e();
  if (arg7 > '耀') {
   throw a.create(Integer.valueOf('耀'), Integer.valueOf(arg7));
  } else {
   int arg8 = 0;

   for (int arg9 = arg4.c; arg9 <= arg4.f; ++arg9) {
    for (int arg10 = arg4.b; arg10 <= arg4.e; ++arg10) {
     for (int arg11 = arg4.a; arg11 <= arg4.d; ++arg11) {
      BlockPosition arg12 = new BlockPosition(arg11, arg10, arg9);
      BlockPosition arg13 = arg12.a(arg6);
      IBlockData arg14 = arg.getType(arg12);
      if (!arg3 || arg14.getBlock() != Blocks.AIR) {
       if (arg14 != arg.getType(arg13)) {
        return OptionalInt.empty();
       }

       TileEntity arg15 = arg.getTileEntity(arg12);
       TileEntity arg16 = arg.getTileEntity(arg13);
       if (arg15 != null) {
        if (arg16 == null) {
         return OptionalInt.empty();
        }

        NBTTagCompound arg17 = arg15.save(new NBTTagCompound());
        arg17.remove("x");
        arg17.remove("y");
        arg17.remove("z");
        NBTTagCompound arg18 = arg16.save(new NBTTagCompound());
        arg18.remove("x");
        arg18.remove("y");
        arg18.remove("z");
        if (!arg17.equals(arg18)) {
         return OptionalInt.empty();
        }
       }

       ++arg8;
      }
     }
    }
   }

   return OptionalInt.of(arg8);
  }
 }
}